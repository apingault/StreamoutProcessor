/// \file DIF.h
/*
*
* DIF.h header template automatically generated by a class generator
* Creation date : lun. aoï¿½t 3 2015
*
* This file is part of DQMSDHCAL libraries.
*
* DQMSDHCAL is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* based upon these libraries are permitted. Any copy of these libraries
* must include this copyright notice.
*
* DQMSDHCAL is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with DQMSDHCAL.  If not, see <http://www.gnu.org/licenses/>.
*
* @author Laurent Mirabito
* @copyright CNRS , IPNL
*/


#ifndef DQMSDHCAL_DIF_H
#define DQMSDHCAL_DIF_H

// -- std headers
#include <map>
#include <string>
#include <vector>
#include <bitset>
#include <iostream>
#include <stdio.h>

// -- dqm sdhcal headers
#include "DIFReadoutConstant.h"
#include "DIFUnpacker.h"

/**
\class DIFSlowControl
\author  L.Mirabito
\date March 2010
\version 1.0

\brief Handler of DIF Slow Control  info
*/
class DIFSlowControl
{
public:
//! Constructor
/**
   @param version Data format version
   @param DIdi DIF id
   @param buf Pointer to the Raw data buffer
 */
DIFSlowControl(unsigned int version, unsigned short DIdi, unsigned char *buf);

//! Default Constructor
DIFSlowControl(){}

//! get DIF id
unsigned short getDIFId() { return _DIFId;}

//! Get chips map
/**
   @return a map of < Asic Id, map of <string (parameter name),int (parameter value) >
 */
std::map<int, std::map<std::string,int> > getChipsMap(){ return _mapSC;}

//! Get one chip map
/**
   @param asicid ASIC ID
   @return a map of <string (parameter name),int (parameter value) >
 */
std::map<std::string,int> getChipSlowControl(int asicid){ return _mapSC[asicid];}

//! Get one Chip value
/**
   @param asicid ASic ID
   @param param Parameter name
 */
int getChipSlowControl(int asicid,std::string param) { return getChipSlowControl(asicid)[param];}

//! print out full map
void Dump();

private:
//! Fill hardROC 1 map
void FillHR1(int header_shift, unsigned char *cbuf);

//! Fill hardRoc 2 map
void FillHR2(int header_shift, unsigned char *cbuf);

//! read Asic HR1 type
void FillAsicHR1(std::bitset<72*8> &bs);

//! read Asic HR2 Type
void FillAsicHR2(std::bitset<109*8> &bs);

private:

unsigned short			_DIFId; //! DIF Id
unsigned int _version; //! version
unsigned int _asicType;// asicType_
unsigned int _nAsic; //! Number of Asic
std::map<int, std::map<std::string, int> >        _mapSC; //! Storage map (asic,name,value)
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/**
\class DIFPtr
\author  L.Mirabito
\date March 2010
\version 1.0

\brief Handler of SDHCAL DIF raw buffer
*/
class DIFPtr
{
public:
/**
*
*/
DIFPtr(unsigned char* p,uint32_t max_size) : theSize_(max_size),theDIF_(p)
{
  theFrames_.clear();
  theLines_.clear();

  // std::cout << "DIF : " << getID() << std::endl;
  try
  {
      DIFUnpacker::getFramePtr(theFrames_,theLines_,theSize_,theDIF_);
  }
  catch (std::string e)
  {
    std::cout<<" Exception: DIF "<<getID()<<" T ? "<<hasTemperature()<<" " <<e<<std::endl;
  }
}

inline unsigned char* getPtr(){return theDIF_;}

inline std::vector<unsigned char*>& getFramesVector(){return theFrames_;}

inline std::vector<unsigned char*>& getLinesVector(){return theLines_;}

inline  uint32_t getID(){return DIFUnpacker::getID(theDIF_);}

inline  uint32_t getDTC(){return DIFUnpacker::getDTC(theDIF_);}

inline  uint32_t getGTC(){return DIFUnpacker::getGTC(theDIF_);}

inline  unsigned long long getAbsoluteBCID(){return DIFUnpacker::getAbsoluteBCID(theDIF_);}

inline  uint32_t getBCID(){return DIFUnpacker::getBCID(theDIF_);}

inline  uint32_t getLines(){return DIFUnpacker::getLines(theDIF_);}

inline  bool hasLine(uint32_t line){return DIFUnpacker::hasLine(line,theDIF_);}

inline  uint32_t getTASU1(){return DIFUnpacker::getTASU1(theDIF_);}

inline  uint32_t getTASU2(){return DIFUnpacker::getTASU2(theDIF_);}

inline  uint32_t getTDIF(){return DIFUnpacker::getTDIF(theDIF_);}

inline  float getTemperatureDIF(){return 0.508*getTDIF()-9.659;}

inline  float getTemperatureASU1(){return (getTASU1()>>3)*0.0625;}

inline  float getTemperatureASU2(){return (getTASU2()>>3)*0.0625;}

inline  bool hasTemperature(){return DIFUnpacker::hasTemperature(theDIF_);}

inline  bool hasAnalogReadout(){return DIFUnpacker::hasAnalogReadout(theDIF_);}

inline uint32_t getNumberOfFrames(){return theFrames_.size();}

inline unsigned char* getFramePtr(uint32_t i){return theFrames_[i];}

inline uint32_t getFrameAsicHeader(uint32_t i){return DIFUnpacker::getFrameAsicHeader(theFrames_[i]);}

inline uint32_t getFrameBCID(uint32_t i){return DIFUnpacker::getFrameBCID(theFrames_[i]);}

inline uint32_t getFrameTimeToTrigger(uint32_t i){return getBCID()-getFrameBCID(i);}

inline bool getFrameLevel(uint32_t i,uint32_t ipad,uint32_t ilevel){return DIFUnpacker::getFrameLevel(theFrames_[i],ipad,ilevel);}

inline uint32_t getFrameData(uint32_t i,uint32_t iword){return DIFUnpacker::getFrameData(theFrames_[i],iword);}

void dumpDIFInfo()
{
  printf("DIF %d DTC %d GTC %d ABCID %lld BCID %d Lines %d Temperature %d \n",
   getID(),
   getDTC(),
   getGTC(),
   getAbsoluteBCID(),
   getBCID(),
   getLines(),
   hasTemperature());

  if (hasTemperature())
    printf("T: ASU1 %d %f ASU2 %d %f DIF %d  %f \n",getTASU1(),getTemperatureASU1(),getTASU2(),getTemperatureASU2(),getTDIF(),getTemperatureDIF());
  printf("Found %d Lines and %d Frames \n",(int) theLines_.size(),(int) theFrames_.size());
}

private:

uint32_t theSize_;
unsigned char* theDIF_;
std::vector<unsigned char*> theFrames_;
std::vector<unsigned char*> theLines_;
};

#endif  //  DQMSDHCAL_DIF_H
